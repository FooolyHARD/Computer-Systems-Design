
lab1-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000237c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025c0  080025c0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080025c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000000e0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000040d4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001041  00000000  00000000  0002417c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  000251c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003b8  00000000  00000000  00025620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ff0  00000000  00000000  000259d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000057e9  00000000  00000000  000479c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccb7b  00000000  00000000  0004d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119d2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001814  00000000  00000000  00119d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002510 	.word	0x08002510

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	08002510 	.word	0x08002510

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a2d      	ldr	r2, [pc, #180]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <MX_GPIO_Init+0xd4>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_GPIO_Init+0xd4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800058c:	4812      	ldr	r0, [pc, #72]	; (80005d8 <MX_GPIO_Init+0xd8>)
 800058e:	f000 fd95 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_GPIO_Init+0xdc>)
 80005a8:	f000 fbc4 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0xd8>)
 80005c6:	f000 fbb5 	bl	8000d34 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40020800 	.word	0x40020800

080005e0 <led_red>:
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

void led_red() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <led_red+0x2c>)
 80005ec:	f000 fd66 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <led_red+0x2c>)
 80005f8:	f000 fd60 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000602:	4802      	ldr	r0, [pc, #8]	; (800060c <led_red+0x2c>)
 8000604:	f000 fd5a 	bl	80010bc <HAL_GPIO_WritePin>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40020c00 	.word	0x40020c00

08000610 <led_green>:

void led_green() {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <led_green+0x2c>)
 800061c:	f000 fd4e 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <led_green+0x2c>)
 8000628:	f000 fd48 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000632:	4802      	ldr	r0, [pc, #8]	; (800063c <led_green+0x2c>)
 8000634:	f000 fd42 	bl	80010bc <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40020c00 	.word	0x40020c00

08000640 <led_yellow>:

void led_yellow() {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <led_yellow+0x2c>)
 800064c:	f000 fd36 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <led_yellow+0x2c>)
 8000658:	f000 fd30 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000662:	4802      	ldr	r0, [pc, #8]	; (800066c <led_yellow+0x2c>)
 8000664:	f000 fd2a 	bl	80010bc <HAL_GPIO_WritePin>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020c00 	.word	0x40020c00

08000670 <led_none>:

void led_none() {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <led_none+0x2c>)
 800067c:	f000 fd1e 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <led_none+0x2c>)
 8000688:	f000 fd18 	bl	80010bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <led_none+0x2c>)
 8000694:	f000 fd12 	bl	80010bc <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020c00 	.word	0x40020c00

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80006a6:	f001 fb5f 	bl	8001d68 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 f9eb 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f8bf 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f7ff ff25 	bl	8000500 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//  Custom_GPIO_Init();
  int current_stage = RED;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t stage_start = HAL_GetTick();
 80006ba:	f000 fa49 	bl	8000b50 <HAL_GetTick>
 80006be:	6238      	str	r0, [r7, #32]
  uint32_t button_time = HAL_GetTick();
 80006c0:	f000 fa46 	bl	8000b50 <HAL_GetTick>
 80006c4:	61f8      	str	r0, [r7, #28]
  int new_stage = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
  int button_state = GPIO_PIN_SET;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
  int button_was_pressed = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  int short_scenario = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t should_run = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 80006da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006de:	4852      	ldr	r0, [pc, #328]	; (8000828 <main+0x188>)
 80006e0:	f000 fcd4 	bl	800108c <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	607b      	str	r3, [r7, #4]
	  if (button_state == GPIO_PIN_RESET && button_was_pressed == GPIO_PIN_SET && HAL_GetTick() - button_time > 100) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d126      	bne.n	800073c <main+0x9c>
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d123      	bne.n	800073c <main+0x9c>
 80006f4:	f000 fa2c 	bl	8000b50 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	2b64      	cmp	r3, #100	; 0x64
 8000700:	d91c      	bls.n	800073c <main+0x9c>
		  button_was_pressed = GPIO_PIN_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
		  button_time = HAL_GetTick();
 8000706:	f000 fa23 	bl	8000b50 <HAL_GetTick>
 800070a:	61f8      	str	r0, [r7, #28]
		  if(current_stage == RED && HAL_GetTick() - stage_start >= (BASE_STAGE_TIMING / 4)) {
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	2b00      	cmp	r3, #0
 8000710:	d108      	bne.n	8000724 <main+0x84>
 8000712:	f000 fa1d 	bl	8000b50 <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000720:	4293      	cmp	r3, r2
 8000722:	d86f      	bhi.n	8000804 <main+0x164>
			  goto next_stage;
		  } else {
			  if(current_stage == RED) {
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <main+0x92>
				  should_run = (BASE_STAGE_TIMING / 4);
 800072a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e004      	b.n	800073c <main+0x9c>
			  } else if (current_stage != GREEN) {
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	2b01      	cmp	r3, #1
 8000736:	d001      	beq.n	800073c <main+0x9c>
				  short_scenario = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
			  }
		  }
	  }

	  if (button_state == GPIO_PIN_SET && button_was_pressed == GPIO_PIN_RESET && HAL_GetTick() - button_time > 100) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d10e      	bne.n	8000760 <main+0xc0>
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d10b      	bne.n	8000760 <main+0xc0>
 8000748:	f000 fa02 	bl	8000b50 <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	2b64      	cmp	r3, #100	; 0x64
 8000754:	d904      	bls.n	8000760 <main+0xc0>
		  button_was_pressed = GPIO_PIN_SET;
 8000756:	2301      	movs	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
		  button_time = HAL_GetTick();
 800075a:	f000 f9f9 	bl	8000b50 <HAL_GetTick>
 800075e:	61f8      	str	r0, [r7, #28]
	  }

	  if (new_stage) {
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d02e      	beq.n	80007c4 <main+0x124>
		  new_stage = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
		  should_run = current_stage == RED ? BASE_STAGE_TIMING : SHORT_STAGE_TIMING;
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <main+0xd6>
 8000770:	f242 7310 	movw	r3, #10000	; 0x2710
 8000774:	e001      	b.n	800077a <main+0xda>
 8000776:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800077a:	60fb      	str	r3, [r7, #12]
		  if(short_scenario && current_stage == RED) {
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d007      	beq.n	8000792 <main+0xf2>
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <main+0xf2>
			  short_scenario = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
			  should_run = BASE_STAGE_TIMING / 4;
 800078c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000790:	60fb      	str	r3, [r7, #12]
		  }
		  switch (current_stage) {
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	2b03      	cmp	r3, #3
 8000796:	d00f      	beq.n	80007b8 <main+0x118>
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	2b03      	cmp	r3, #3
 800079c:	dc0f      	bgt.n	80007be <main+0x11e>
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <main+0x10c>
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d003      	beq.n	80007b2 <main+0x112>
 80007aa:	e008      	b.n	80007be <main+0x11e>
			  case RED:
				  led_red();
 80007ac:	f7ff ff18 	bl	80005e0 <led_red>
			  break;
 80007b0:	e009      	b.n	80007c6 <main+0x126>
			  case GREEN:
				  led_green();
 80007b2:	f7ff ff2d 	bl	8000610 <led_green>
			  break;
 80007b6:	e006      	b.n	80007c6 <main+0x126>
			  case YELLOW:
				  led_yellow();
 80007b8:	f7ff ff42 	bl	8000640 <led_yellow>
			  break;
 80007bc:	e003      	b.n	80007c6 <main+0x126>
			  default: led_none();
 80007be:	f7ff ff57 	bl	8000670 <led_none>
 80007c2:	e000      	b.n	80007c6 <main+0x126>
		  }
	  }
 80007c4:	bf00      	nop
	  if (current_stage == GREEN_BLINKING) {
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d111      	bne.n	80007f0 <main+0x150>
		  if (((HAL_GetTick() - stage_start) / BLINK_TIMEOUT) % 2) {
 80007cc:	f000 f9c0 	bl	8000b50 <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	6a3b      	ldr	r3, [r7, #32]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <main+0x18c>)
 80007d8:	fba2 2303 	umull	r2, r3, r2, r3
 80007dc:	091b      	lsrs	r3, r3, #4
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <main+0x14c>
			  led_green();
 80007e6:	f7ff ff13 	bl	8000610 <led_green>
 80007ea:	e001      	b.n	80007f0 <main+0x150>
		  } else {
			  led_none();
 80007ec:	f7ff ff40 	bl	8000670 <led_none>
		  }
	  }

	  if (HAL_GetTick() - stage_start >= should_run) {
 80007f0:	f000 f9ae 	bl	8000b50 <HAL_GetTick>
 80007f4:	4602      	mov	r2, r0
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f63f af6c 	bhi.w	80006da <main+0x3a>
next_stage:
 8000802:	e000      	b.n	8000806 <main+0x166>
			  goto next_stage;
 8000804:	bf00      	nop
		  current_stage += 1;
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	3301      	adds	r3, #1
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
		  led_none();
 800080c:	f7ff ff30 	bl	8000670 <led_none>
		  if (current_stage >= STAGES_LAST) {
 8000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000812:	2b03      	cmp	r3, #3
 8000814:	dd01      	ble.n	800081a <main+0x17a>
			  current_stage = RED;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
		  }
		  stage_start = HAL_GetTick();
 800081a:	f000 f999 	bl	8000b50 <HAL_GetTick>
 800081e:	6238      	str	r0, [r7, #32]
		  new_stage = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  {
 8000824:	e759      	b.n	80006da <main+0x3a>
 8000826:	bf00      	nop
 8000828:	40020800 	.word	0x40020800
 800082c:	51eb851f 	.word	0x51eb851f

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	; 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fc15 	bl	800206e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <SystemClock_Config+0xb8>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <SystemClock_Config+0xb8>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <SystemClock_Config+0xb8>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <SystemClock_Config+0xbc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <SystemClock_Config+0xbc>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <SystemClock_Config+0xbc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2310      	movs	r3, #16
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089c:	2300      	movs	r3, #0
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fc23 	bl	80010f0 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008b0:	f000 f81e 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fe86 	bl	80015e0 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008da:	f000 f809 	bl	80008f0 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	; 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f8c6 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d207      	bcs.n	80009e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d0:	f001 fa2a 	bl	8001e28 <__errno>
 80009d4:	4603      	mov	r3, r0
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009de:	e009      	b.n	80009f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <_sbrk+0x64>)
 80009f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20030000 	.word	0x20030000
 8000a00:	00000400 	.word	0x00000400
 8000a04:	20000094 	.word	0x20000094
 8000a08:	20000158 	.word	0x20000158

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5a:	f7ff ffd7 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f001 fadf 	bl	8002020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fe1d 	bl	80006a0 <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a74:	080025c8 	.word	0x080025c8
  ldr r2, =_sbss
 8000a78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a7c:	20000158 	.word	0x20000158

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <HAL_Init+0x40>)
 8000a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_Init+0x40>)
 8000a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x40>)
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f90d 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff ff20 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023c00 	.word	0x40023c00

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f917 	bl	8000d1a <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b04:	f000 f8ed 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000098 	.word	0x20000098

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000098 	.word	0x20000098

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff47 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff5c 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb0 	bl	8000c88 <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	e177      	b.n	8001040 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8166 	bne.w	800103a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d005      	beq.n	8000d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d130      	bne.n	8000de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 0201 	and.w	r2, r3, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d017      	beq.n	8000e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d123      	bne.n	8000e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	69b9      	ldr	r1, [r7, #24]
 8000e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0203 	and.w	r2, r3, #3
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80c0 	beq.w	800103a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b66      	ldr	r3, [pc, #408]	; (8001058 <HAL_GPIO_Init+0x324>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a65      	ldr	r2, [pc, #404]	; (8001058 <HAL_GPIO_Init+0x324>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b63      	ldr	r3, [pc, #396]	; (8001058 <HAL_GPIO_Init+0x324>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed6:	4a61      	ldr	r2, [pc, #388]	; (800105c <HAL_GPIO_Init+0x328>)
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a58      	ldr	r2, [pc, #352]	; (8001060 <HAL_GPIO_Init+0x32c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d037      	beq.n	8000f72 <HAL_GPIO_Init+0x23e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a57      	ldr	r2, [pc, #348]	; (8001064 <HAL_GPIO_Init+0x330>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d031      	beq.n	8000f6e <HAL_GPIO_Init+0x23a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a56      	ldr	r2, [pc, #344]	; (8001068 <HAL_GPIO_Init+0x334>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d02b      	beq.n	8000f6a <HAL_GPIO_Init+0x236>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a55      	ldr	r2, [pc, #340]	; (800106c <HAL_GPIO_Init+0x338>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d025      	beq.n	8000f66 <HAL_GPIO_Init+0x232>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a54      	ldr	r2, [pc, #336]	; (8001070 <HAL_GPIO_Init+0x33c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d01f      	beq.n	8000f62 <HAL_GPIO_Init+0x22e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a53      	ldr	r2, [pc, #332]	; (8001074 <HAL_GPIO_Init+0x340>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x22a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a52      	ldr	r2, [pc, #328]	; (8001078 <HAL_GPIO_Init+0x344>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x226>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a51      	ldr	r2, [pc, #324]	; (800107c <HAL_GPIO_Init+0x348>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x222>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a50      	ldr	r2, [pc, #320]	; (8001080 <HAL_GPIO_Init+0x34c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x21e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x350>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x21a>
 8000f4a:	2309      	movs	r3, #9
 8000f4c:	e012      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f4e:	230a      	movs	r3, #10
 8000f50:	e010      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f52:	2308      	movs	r3, #8
 8000f54:	e00e      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e00c      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	e00a      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x240>
 8000f72:	2300      	movs	r3, #0
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f84:	4935      	ldr	r1, [pc, #212]	; (800105c <HAL_GPIO_Init+0x328>)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <HAL_GPIO_Init+0x354>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb6:	4a34      	ldr	r2, [pc, #208]	; (8001088 <HAL_GPIO_Init+0x354>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <HAL_GPIO_Init+0x354>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe0:	4a29      	ldr	r2, [pc, #164]	; (8001088 <HAL_GPIO_Init+0x354>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <HAL_GPIO_Init+0x354>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <HAL_GPIO_Init+0x354>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_GPIO_Init+0x354>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_GPIO_Init+0x354>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	f67f ae84 	bls.w	8000d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40021c00 	.word	0x40021c00
 8001080:	40022000 	.word	0x40022000
 8001084:	40022400 	.word	0x40022400
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d8:	e003      	b.n	80010e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	041a      	lsls	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e267      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4b88      	ldr	r3, [pc, #544]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b82      	ldr	r3, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e242      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a75      	ldr	r2, [pc, #468]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6f      	ldr	r2, [pc, #444]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6c      	ldr	r2, [pc, #432]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b69      	ldr	r3, [pc, #420]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a68      	ldr	r2, [pc, #416]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a65      	ldr	r2, [pc, #404]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcd2 	bl	8000b50 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcce 	bl	8000b50 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e207      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcbe 	bl	8000b50 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fcba 	bl	8000b50 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1f3      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1c7      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fc73 	bl	8000b50 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc6f 	bl	8000b50 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1a8      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4925      	ldr	r1, [pc, #148]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc52 	bl	8000b50 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc4e 	bl	8000b50 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e187      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d036      	beq.n	8001348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc32 	bl	8000b50 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc2e 	bl	8000b50 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e167      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e01b      	b.n	8001348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fc1b 	bl	8000b50 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e00e      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc17 	bl	8000b50 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d907      	bls.n	800133c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e150      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001330:	40023800 	.word	0x40023800
 8001334:	42470000 	.word	0x42470000
 8001338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ea      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8097 	beq.w	8001484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a7c      	ldr	r2, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b7a      	ldr	r3, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b77      	ldr	r3, [pc, #476]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fbd7 	bl	8000b50 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fbd3 	bl	8000b50 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e10c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x2ea>
 80013cc:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x30c>
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6713      	str	r3, [r2, #112]	; 0x70
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6713      	str	r3, [r2, #112]	; 0x70
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0304 	bic.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d015      	beq.n	8001448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fb98 	bl	8000b50 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb94 	bl	8000b50 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0cb      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0ee      	beq.n	8001424 <HAL_RCC_OscConfig+0x334>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fb82 	bl	8000b50 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fb7e 	bl	8000b50 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0b5      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ee      	bne.n	8001450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a38      	ldr	r2, [pc, #224]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a1 	beq.w	80015d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d05c      	beq.n	8001554 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d141      	bne.n	8001526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb52 	bl	8000b50 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb4e 	bl	8000b50 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e087      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	3b01      	subs	r3, #1
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	491b      	ldr	r1, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb27 	bl	8000b50 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb23 	bl	8000b50 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e05c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x416>
 8001524:	e054      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fb10 	bl	8000b50 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fb0c 	bl	8000b50 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e045      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x444>
 8001552:	e03d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e038      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000
 8001568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x4ec>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d028      	beq.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d121      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d11a      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d111      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0cc      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90c      	bls.n	800161c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800163e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d044      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e067      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4934      	ldr	r1, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fa3e 	bl	8000b50 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff fa3a 	bl	8000b50 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20c      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f99e 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08002528 	.word	0x08002528
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b090      	sub	sp, #64	; 0x40
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d00d      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	f200 80a1 	bhi.w	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x34>
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017de:	e09b      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017e4:	e09b      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ea:	e098      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4b4f      	ldr	r3, [pc, #316]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f6:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d028      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	627a      	str	r2, [r7, #36]	; 0x24
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001814:	2100      	movs	r1, #0
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001818:	fb03 f201 	mul.w	r2, r3, r1
 800181c:	2300      	movs	r3, #0
 800181e:	fb00 f303 	mul.w	r3, r0, r3
 8001822:	4413      	add	r3, r2
 8001824:	4a43      	ldr	r2, [pc, #268]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001826:	fba0 1202 	umull	r1, r2, r0, r2
 800182a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800182c:	460a      	mov	r2, r1
 800182e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	4413      	add	r3, r2
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001838:	2200      	movs	r2, #0
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	61fa      	str	r2, [r7, #28]
 800183e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001846:	f7fe fcd9 	bl	80001fc <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4613      	mov	r3, r2
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001852:	e053      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	617a      	str	r2, [r7, #20]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001866:	f04f 0b00 	mov.w	fp, #0
 800186a:	4652      	mov	r2, sl
 800186c:	465b      	mov	r3, fp
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ebb2 080a 	subs.w	r8, r2, sl
 8001886:	eb63 090b 	sbc.w	r9, r3, fp
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800189a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800189e:	ebb2 0408 	subs.w	r4, r2, r8
 80018a2:	eb63 0509 	sbc.w	r5, r3, r9
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	00eb      	lsls	r3, r5, #3
 80018b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b4:	00e2      	lsls	r2, r4, #3
 80018b6:	4614      	mov	r4, r2
 80018b8:	461d      	mov	r5, r3
 80018ba:	eb14 030a 	adds.w	r3, r4, sl
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	eb45 030b 	adc.w	r3, r5, fp
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d2:	4629      	mov	r1, r5
 80018d4:	028b      	lsls	r3, r1, #10
 80018d6:	4621      	mov	r1, r4
 80018d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018dc:	4621      	mov	r1, r4
 80018de:	028a      	lsls	r2, r1, #10
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	2200      	movs	r2, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f0:	f7fe fc84 	bl	80001fc <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800190c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001920:	4618      	mov	r0, r3
 8001922:	3740      	adds	r7, #64	; 0x40
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	017d7840 	.word	0x017d7840

08001938 <findslot>:
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <findslot+0x2c>)
 800193a:	b510      	push	{r4, lr}
 800193c:	4604      	mov	r4, r0
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	b118      	cbz	r0, 800194a <findslot+0x12>
 8001942:	6983      	ldr	r3, [r0, #24]
 8001944:	b90b      	cbnz	r3, 800194a <findslot+0x12>
 8001946:	f000 facd 	bl	8001ee4 <__sinit>
 800194a:	2c13      	cmp	r4, #19
 800194c:	d807      	bhi.n	800195e <findslot+0x26>
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <findslot+0x30>)
 8001950:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001954:	3201      	adds	r2, #1
 8001956:	d002      	beq.n	800195e <findslot+0x26>
 8001958:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800195c:	bd10      	pop	{r4, pc}
 800195e:	2000      	movs	r0, #0
 8001960:	e7fc      	b.n	800195c <findslot+0x24>
 8001962:	bf00      	nop
 8001964:	20000014 	.word	0x20000014
 8001968:	200000a8 	.word	0x200000a8

0800196c <error>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	4604      	mov	r4, r0
 8001970:	f000 fa5a 	bl	8001e28 <__errno>
 8001974:	2613      	movs	r6, #19
 8001976:	4605      	mov	r5, r0
 8001978:	2700      	movs	r7, #0
 800197a:	4630      	mov	r0, r6
 800197c:	4639      	mov	r1, r7
 800197e:	beab      	bkpt	0x00ab
 8001980:	4606      	mov	r6, r0
 8001982:	602e      	str	r6, [r5, #0]
 8001984:	4620      	mov	r0, r4
 8001986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001988 <checkerror>:
 8001988:	1c43      	adds	r3, r0, #1
 800198a:	d101      	bne.n	8001990 <checkerror+0x8>
 800198c:	f7ff bfee 	b.w	800196c <error>
 8001990:	4770      	bx	lr

08001992 <_swiread>:
 8001992:	b530      	push	{r4, r5, lr}
 8001994:	b085      	sub	sp, #20
 8001996:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800199a:	9203      	str	r2, [sp, #12]
 800199c:	2406      	movs	r4, #6
 800199e:	ad01      	add	r5, sp, #4
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	beab      	bkpt	0x00ab
 80019a6:	4604      	mov	r4, r0
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff ffed 	bl	8001988 <checkerror>
 80019ae:	b005      	add	sp, #20
 80019b0:	bd30      	pop	{r4, r5, pc}

080019b2 <_read>:
 80019b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019b4:	4615      	mov	r5, r2
 80019b6:	9101      	str	r1, [sp, #4]
 80019b8:	f7ff ffbe 	bl	8001938 <findslot>
 80019bc:	9901      	ldr	r1, [sp, #4]
 80019be:	4604      	mov	r4, r0
 80019c0:	b938      	cbnz	r0, 80019d2 <_read+0x20>
 80019c2:	f000 fa31 	bl	8001e28 <__errno>
 80019c6:	2309      	movs	r3, #9
 80019c8:	6003      	str	r3, [r0, #0]
 80019ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ce:	b003      	add	sp, #12
 80019d0:	bd30      	pop	{r4, r5, pc}
 80019d2:	6800      	ldr	r0, [r0, #0]
 80019d4:	462a      	mov	r2, r5
 80019d6:	f7ff ffdc 	bl	8001992 <_swiread>
 80019da:	1c43      	adds	r3, r0, #1
 80019dc:	d0f7      	beq.n	80019ce <_read+0x1c>
 80019de:	6863      	ldr	r3, [r4, #4]
 80019e0:	1a2a      	subs	r2, r5, r0
 80019e2:	4413      	add	r3, r2
 80019e4:	6063      	str	r3, [r4, #4]
 80019e6:	4610      	mov	r0, r2
 80019e8:	e7f1      	b.n	80019ce <_read+0x1c>

080019ea <_swilseek>:
 80019ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019ec:	460c      	mov	r4, r1
 80019ee:	4616      	mov	r6, r2
 80019f0:	f7ff ffa2 	bl	8001938 <findslot>
 80019f4:	4605      	mov	r5, r0
 80019f6:	b940      	cbnz	r0, 8001a0a <_swilseek+0x20>
 80019f8:	f000 fa16 	bl	8001e28 <__errno>
 80019fc:	2309      	movs	r3, #9
 80019fe:	6003      	str	r3, [r0, #0]
 8001a00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a04:	4620      	mov	r0, r4
 8001a06:	b003      	add	sp, #12
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0a:	2e02      	cmp	r6, #2
 8001a0c:	d903      	bls.n	8001a16 <_swilseek+0x2c>
 8001a0e:	f000 fa0b 	bl	8001e28 <__errno>
 8001a12:	2316      	movs	r3, #22
 8001a14:	e7f3      	b.n	80019fe <_swilseek+0x14>
 8001a16:	2e01      	cmp	r6, #1
 8001a18:	d112      	bne.n	8001a40 <_swilseek+0x56>
 8001a1a:	6843      	ldr	r3, [r0, #4]
 8001a1c:	18e4      	adds	r4, r4, r3
 8001a1e:	d4f6      	bmi.n	8001a0e <_swilseek+0x24>
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	260a      	movs	r6, #10
 8001a24:	e9cd 3400 	strd	r3, r4, [sp]
 8001a28:	466f      	mov	r7, sp
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	4639      	mov	r1, r7
 8001a2e:	beab      	bkpt	0x00ab
 8001a30:	4606      	mov	r6, r0
 8001a32:	4630      	mov	r0, r6
 8001a34:	f7ff ffa8 	bl	8001988 <checkerror>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	dbe1      	blt.n	8001a00 <_swilseek+0x16>
 8001a3c:	606c      	str	r4, [r5, #4]
 8001a3e:	e7e1      	b.n	8001a04 <_swilseek+0x1a>
 8001a40:	2e02      	cmp	r6, #2
 8001a42:	d1ed      	bne.n	8001a20 <_swilseek+0x36>
 8001a44:	6803      	ldr	r3, [r0, #0]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	260c      	movs	r6, #12
 8001a4a:	466f      	mov	r7, sp
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	4639      	mov	r1, r7
 8001a50:	beab      	bkpt	0x00ab
 8001a52:	4606      	mov	r6, r0
 8001a54:	4630      	mov	r0, r6
 8001a56:	f7ff ff97 	bl	8001988 <checkerror>
 8001a5a:	1c43      	adds	r3, r0, #1
 8001a5c:	d0d0      	beq.n	8001a00 <_swilseek+0x16>
 8001a5e:	4404      	add	r4, r0
 8001a60:	e7de      	b.n	8001a20 <_swilseek+0x36>

08001a62 <_lseek>:
 8001a62:	f7ff bfc2 	b.w	80019ea <_swilseek>

08001a66 <_swiwrite>:
 8001a66:	b530      	push	{r4, r5, lr}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001a6e:	9203      	str	r2, [sp, #12]
 8001a70:	2405      	movs	r4, #5
 8001a72:	ad01      	add	r5, sp, #4
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	beab      	bkpt	0x00ab
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff ff83 	bl	8001988 <checkerror>
 8001a82:	b005      	add	sp, #20
 8001a84:	bd30      	pop	{r4, r5, pc}

08001a86 <_write>:
 8001a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a88:	4615      	mov	r5, r2
 8001a8a:	9101      	str	r1, [sp, #4]
 8001a8c:	f7ff ff54 	bl	8001938 <findslot>
 8001a90:	9901      	ldr	r1, [sp, #4]
 8001a92:	4604      	mov	r4, r0
 8001a94:	b930      	cbnz	r0, 8001aa4 <_write+0x1e>
 8001a96:	f000 f9c7 	bl	8001e28 <__errno>
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	6003      	str	r3, [r0, #0]
 8001a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa2:	e012      	b.n	8001aca <_write+0x44>
 8001aa4:	6800      	ldr	r0, [r0, #0]
 8001aa6:	462a      	mov	r2, r5
 8001aa8:	f7ff ffdd 	bl	8001a66 <_swiwrite>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	dbf6      	blt.n	8001a9e <_write+0x18>
 8001ab0:	6862      	ldr	r2, [r4, #4]
 8001ab2:	1a2b      	subs	r3, r5, r0
 8001ab4:	441a      	add	r2, r3
 8001ab6:	42a8      	cmp	r0, r5
 8001ab8:	6062      	str	r2, [r4, #4]
 8001aba:	d105      	bne.n	8001ac8 <_write+0x42>
 8001abc:	2000      	movs	r0, #0
 8001abe:	b003      	add	sp, #12
 8001ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ac4:	f7ff bf52 	b.w	800196c <error>
 8001ac8:	4618      	mov	r0, r3
 8001aca:	b003      	add	sp, #12
 8001acc:	bd30      	pop	{r4, r5, pc}

08001ace <_swiclose>:
 8001ace:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ad0:	2402      	movs	r4, #2
 8001ad2:	9001      	str	r0, [sp, #4]
 8001ad4:	ad01      	add	r5, sp, #4
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	beab      	bkpt	0x00ab
 8001adc:	4604      	mov	r4, r0
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff ff52 	bl	8001988 <checkerror>
 8001ae4:	b003      	add	sp, #12
 8001ae6:	bd30      	pop	{r4, r5, pc}

08001ae8 <_close>:
 8001ae8:	b538      	push	{r3, r4, r5, lr}
 8001aea:	4605      	mov	r5, r0
 8001aec:	f7ff ff24 	bl	8001938 <findslot>
 8001af0:	4604      	mov	r4, r0
 8001af2:	b930      	cbnz	r0, 8001b02 <_close+0x1a>
 8001af4:	f000 f998 	bl	8001e28 <__errno>
 8001af8:	2309      	movs	r3, #9
 8001afa:	6003      	str	r3, [r0, #0]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b00:	bd38      	pop	{r3, r4, r5, pc}
 8001b02:	3d01      	subs	r5, #1
 8001b04:	2d01      	cmp	r5, #1
 8001b06:	d809      	bhi.n	8001b1c <_close+0x34>
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <_close+0x48>)
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d104      	bne.n	8001b1c <_close+0x34>
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b16:	6003      	str	r3, [r0, #0]
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e7f1      	b.n	8001b00 <_close+0x18>
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	f7ff ffd6 	bl	8001ace <_swiclose>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d1ec      	bne.n	8001b00 <_close+0x18>
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2a:	6023      	str	r3, [r4, #0]
 8001b2c:	e7e8      	b.n	8001b00 <_close+0x18>
 8001b2e:	bf00      	nop
 8001b30:	200000a8 	.word	0x200000a8

08001b34 <_swistat>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	460c      	mov	r4, r1
 8001b38:	f7ff fefe 	bl	8001938 <findslot>
 8001b3c:	4605      	mov	r5, r0
 8001b3e:	b930      	cbnz	r0, 8001b4e <_swistat+0x1a>
 8001b40:	f000 f972 	bl	8001e28 <__errno>
 8001b44:	2309      	movs	r3, #9
 8001b46:	6003      	str	r3, [r0, #0]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b54:	6063      	str	r3, [r4, #4]
 8001b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5a:	64a3      	str	r3, [r4, #72]	; 0x48
 8001b5c:	260c      	movs	r6, #12
 8001b5e:	4630      	mov	r0, r6
 8001b60:	4629      	mov	r1, r5
 8001b62:	beab      	bkpt	0x00ab
 8001b64:	4605      	mov	r5, r0
 8001b66:	4628      	mov	r0, r5
 8001b68:	f7ff ff0e 	bl	8001988 <checkerror>
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	bf1c      	itt	ne
 8001b70:	6120      	strne	r0, [r4, #16]
 8001b72:	2000      	movne	r0, #0
 8001b74:	e7ea      	b.n	8001b4c <_swistat+0x18>

08001b76 <_stat>:
 8001b76:	b538      	push	{r3, r4, r5, lr}
 8001b78:	460d      	mov	r5, r1
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	2258      	movs	r2, #88	; 0x58
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4628      	mov	r0, r5
 8001b82:	f000 fa74 	bl	800206e <memset>
 8001b86:	4620      	mov	r0, r4
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f000 f811 	bl	8001bb0 <_swiopen>
 8001b8e:	1c43      	adds	r3, r0, #1
 8001b90:	4604      	mov	r4, r0
 8001b92:	d00b      	beq.n	8001bac <_stat+0x36>
 8001b94:	686b      	ldr	r3, [r5, #4]
 8001b96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001b9a:	606b      	str	r3, [r5, #4]
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	f7ff ffc9 	bl	8001b34 <_swistat>
 8001ba2:	4605      	mov	r5, r0
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff ff9f 	bl	8001ae8 <_close>
 8001baa:	462c      	mov	r4, r5
 8001bac:	4620      	mov	r0, r4
 8001bae:	bd38      	pop	{r3, r4, r5, pc}

08001bb0 <_swiopen>:
 8001bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bb4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001c60 <_swiopen+0xb0>
 8001bb8:	b097      	sub	sp, #92	; 0x5c
 8001bba:	4607      	mov	r7, r0
 8001bbc:	460e      	mov	r6, r1
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001bc4:	1c61      	adds	r1, r4, #1
 8001bc6:	d037      	beq.n	8001c38 <_swiopen+0x88>
 8001bc8:	3501      	adds	r5, #1
 8001bca:	2d14      	cmp	r5, #20
 8001bcc:	d1f8      	bne.n	8001bc0 <_swiopen+0x10>
 8001bce:	f000 f92b 	bl	8001e28 <__errno>
 8001bd2:	2318      	movs	r3, #24
 8001bd4:	6003      	str	r3, [r0, #0]
 8001bd6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001bda:	e03d      	b.n	8001c58 <_swiopen+0xa8>
 8001bdc:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001be0:	f240 6301 	movw	r3, #1537	; 0x601
 8001be4:	07b2      	lsls	r2, r6, #30
 8001be6:	bf48      	it	mi
 8001be8:	f044 0402 	orrmi.w	r4, r4, #2
 8001bec:	421e      	tst	r6, r3
 8001bee:	bf18      	it	ne
 8001bf0:	f044 0404 	orrne.w	r4, r4, #4
 8001bf4:	0733      	lsls	r3, r6, #28
 8001bf6:	bf48      	it	mi
 8001bf8:	f024 0404 	bicmi.w	r4, r4, #4
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	bf48      	it	mi
 8001c00:	f044 0408 	orrmi.w	r4, r4, #8
 8001c04:	9700      	str	r7, [sp, #0]
 8001c06:	f7fe faf1 	bl	80001ec <strlen>
 8001c0a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001c0e:	2401      	movs	r4, #1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4649      	mov	r1, r9
 8001c14:	beab      	bkpt	0x00ab
 8001c16:	4604      	mov	r4, r0
 8001c18:	2c00      	cmp	r4, #0
 8001c1a:	db08      	blt.n	8001c2e <_swiopen+0x7e>
 8001c1c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001c20:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c8 3004 	str.w	r3, [r8, #4]
 8001c2a:	462c      	mov	r4, r5
 8001c2c:	e014      	b.n	8001c58 <_swiopen+0xa8>
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff fe9c 	bl	800196c <error>
 8001c34:	4604      	mov	r4, r0
 8001c36:	e00f      	b.n	8001c58 <_swiopen+0xa8>
 8001c38:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001c3c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001c40:	46e9      	mov	r9, sp
 8001c42:	d1cb      	bne.n	8001bdc <_swiopen+0x2c>
 8001c44:	4649      	mov	r1, r9
 8001c46:	4638      	mov	r0, r7
 8001c48:	f7ff ff95 	bl	8001b76 <_stat>
 8001c4c:	3001      	adds	r0, #1
 8001c4e:	d0c5      	beq.n	8001bdc <_swiopen+0x2c>
 8001c50:	f000 f8ea 	bl	8001e28 <__errno>
 8001c54:	2311      	movs	r3, #17
 8001c56:	6003      	str	r3, [r0, #0]
 8001c58:	4620      	mov	r0, r4
 8001c5a:	b017      	add	sp, #92	; 0x5c
 8001c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c60:	200000a8 	.word	0x200000a8

08001c64 <_get_semihosting_exts>:
 8001c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001c68:	4606      	mov	r6, r0
 8001c6a:	460f      	mov	r7, r1
 8001c6c:	482a      	ldr	r0, [pc, #168]	; (8001d18 <_get_semihosting_exts+0xb4>)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4615      	mov	r5, r2
 8001c72:	f7ff ff9d 	bl	8001bb0 <_swiopen>
 8001c76:	462a      	mov	r2, r5
 8001c78:	4604      	mov	r4, r0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f000 f9f6 	bl	800206e <memset>
 8001c82:	1c63      	adds	r3, r4, #1
 8001c84:	d016      	beq.n	8001cb4 <_get_semihosting_exts+0x50>
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff fe56 	bl	8001938 <findslot>
 8001c8c:	f04f 090c 	mov.w	r9, #12
 8001c90:	4680      	mov	r8, r0
 8001c92:	4648      	mov	r0, r9
 8001c94:	4641      	mov	r1, r8
 8001c96:	beab      	bkpt	0x00ab
 8001c98:	4680      	mov	r8, r0
 8001c9a:	4640      	mov	r0, r8
 8001c9c:	f7ff fe74 	bl	8001988 <checkerror>
 8001ca0:	2803      	cmp	r0, #3
 8001ca2:	dd02      	ble.n	8001caa <_get_semihosting_exts+0x46>
 8001ca4:	1ec3      	subs	r3, r0, #3
 8001ca6:	42ab      	cmp	r3, r5
 8001ca8:	dc08      	bgt.n	8001cbc <_get_semihosting_exts+0x58>
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff ff1c 	bl	8001ae8 <_close>
 8001cb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	b003      	add	sp, #12
 8001cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	eb0d 0102 	add.w	r1, sp, r2
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff fe75 	bl	80019b2 <_read>
 8001cc8:	2803      	cmp	r0, #3
 8001cca:	ddee      	ble.n	8001caa <_get_semihosting_exts+0x46>
 8001ccc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cd0:	2b53      	cmp	r3, #83	; 0x53
 8001cd2:	d1ea      	bne.n	8001caa <_get_semihosting_exts+0x46>
 8001cd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001cd8:	2b48      	cmp	r3, #72	; 0x48
 8001cda:	d1e6      	bne.n	8001caa <_get_semihosting_exts+0x46>
 8001cdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ce0:	2b46      	cmp	r3, #70	; 0x46
 8001ce2:	d1e2      	bne.n	8001caa <_get_semihosting_exts+0x46>
 8001ce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ce8:	2b42      	cmp	r3, #66	; 0x42
 8001cea:	d1de      	bne.n	8001caa <_get_semihosting_exts+0x46>
 8001cec:	2201      	movs	r2, #1
 8001cee:	4639      	mov	r1, r7
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fe7a 	bl	80019ea <_swilseek>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	dbd7      	blt.n	8001caa <_get_semihosting_exts+0x46>
 8001cfa:	462a      	mov	r2, r5
 8001cfc:	4631      	mov	r1, r6
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff fe57 	bl	80019b2 <_read>
 8001d04:	4605      	mov	r5, r0
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff feee 	bl	8001ae8 <_close>
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff fe3b 	bl	8001988 <checkerror>
 8001d12:	4604      	mov	r4, r0
 8001d14:	e7ce      	b.n	8001cb4 <_get_semihosting_exts+0x50>
 8001d16:	bf00      	nop
 8001d18:	08002538 	.word	0x08002538

08001d1c <initialise_semihosting_exts>:
 8001d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d1e:	4d0a      	ldr	r5, [pc, #40]	; (8001d48 <initialise_semihosting_exts+0x2c>)
 8001d20:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <initialise_semihosting_exts+0x30>)
 8001d22:	2100      	movs	r1, #0
 8001d24:	2201      	movs	r2, #1
 8001d26:	a801      	add	r0, sp, #4
 8001d28:	6029      	str	r1, [r5, #0]
 8001d2a:	6022      	str	r2, [r4, #0]
 8001d2c:	f7ff ff9a 	bl	8001c64 <_get_semihosting_exts>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	dd07      	ble.n	8001d44 <initialise_semihosting_exts+0x28>
 8001d34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	602a      	str	r2, [r5, #0]
 8001d42:	6023      	str	r3, [r4, #0]
 8001d44:	b003      	add	sp, #12
 8001d46:	bd30      	pop	{r4, r5, pc}
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000010 	.word	0x20000010

08001d50 <_has_ext_stdout_stderr>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	4c04      	ldr	r4, [pc, #16]	; (8001d64 <_has_ext_stdout_stderr+0x14>)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	da01      	bge.n	8001d5e <_has_ext_stdout_stderr+0xe>
 8001d5a:	f7ff ffdf 	bl	8001d1c <initialise_semihosting_exts>
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	bf00      	nop
 8001d64:	20000010 	.word	0x20000010

08001d68 <initialise_monitor_handles>:
 8001d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001e20 <initialise_monitor_handles+0xb8>
 8001d72:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d76:	2303      	movs	r3, #3
 8001d78:	2400      	movs	r4, #0
 8001d7a:	9303      	str	r3, [sp, #12]
 8001d7c:	af01      	add	r7, sp, #4
 8001d7e:	9402      	str	r4, [sp, #8]
 8001d80:	2501      	movs	r5, #1
 8001d82:	4628      	mov	r0, r5
 8001d84:	4639      	mov	r1, r7
 8001d86:	beab      	bkpt	0x00ab
 8001d88:	4605      	mov	r5, r0
 8001d8a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001e24 <initialise_monitor_handles+0xbc>
 8001d8e:	4623      	mov	r3, r4
 8001d90:	4c20      	ldr	r4, [pc, #128]	; (8001e14 <initialise_monitor_handles+0xac>)
 8001d92:	f8c8 5000 	str.w	r5, [r8]
 8001d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d9a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	2b14      	cmp	r3, #20
 8001da2:	d1fa      	bne.n	8001d9a <initialise_monitor_handles+0x32>
 8001da4:	f7ff ffd4 	bl	8001d50 <_has_ext_stdout_stderr>
 8001da8:	4d1b      	ldr	r5, [pc, #108]	; (8001e18 <initialise_monitor_handles+0xb0>)
 8001daa:	b1d0      	cbz	r0, 8001de2 <initialise_monitor_handles+0x7a>
 8001dac:	f04f 0a03 	mov.w	sl, #3
 8001db0:	2304      	movs	r3, #4
 8001db2:	f8cd 9004 	str.w	r9, [sp, #4]
 8001db6:	2601      	movs	r6, #1
 8001db8:	f8cd a00c 	str.w	sl, [sp, #12]
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	4639      	mov	r1, r7
 8001dc2:	beab      	bkpt	0x00ab
 8001dc4:	4683      	mov	fp, r0
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <initialise_monitor_handles+0xb4>)
 8001dc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8001dcc:	f8c3 b000 	str.w	fp, [r3]
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	f8cd a00c 	str.w	sl, [sp, #12]
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	4630      	mov	r0, r6
 8001dda:	4639      	mov	r1, r7
 8001ddc:	beab      	bkpt	0x00ab
 8001dde:	4606      	mov	r6, r0
 8001de0:	602e      	str	r6, [r5, #0]
 8001de2:	682b      	ldr	r3, [r5, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	bf02      	ittt	eq
 8001de8:	4b0c      	ldreq	r3, [pc, #48]	; (8001e1c <initialise_monitor_handles+0xb4>)
 8001dea:	681b      	ldreq	r3, [r3, #0]
 8001dec:	602b      	streq	r3, [r5, #0]
 8001dee:	2600      	movs	r6, #0
 8001df0:	f8d8 3000 	ldr.w	r3, [r8]
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	6066      	str	r6, [r4, #4]
 8001df8:	f7ff ffaa 	bl	8001d50 <_has_ext_stdout_stderr>
 8001dfc:	b130      	cbz	r0, 8001e0c <initialise_monitor_handles+0xa4>
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <initialise_monitor_handles+0xb4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001e06:	682b      	ldr	r3, [r5, #0]
 8001e08:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001e0c:	b005      	add	sp, #20
 8001e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e12:	bf00      	nop
 8001e14:	200000a8 	.word	0x200000a8
 8001e18:	2000009c 	.word	0x2000009c
 8001e1c:	200000a4 	.word	0x200000a4
 8001e20:	0800254e 	.word	0x0800254e
 8001e24:	200000a0 	.word	0x200000a0

08001e28 <__errno>:
 8001e28:	4b01      	ldr	r3, [pc, #4]	; (8001e30 <__errno+0x8>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000014 	.word	0x20000014

08001e34 <std>:
 8001e34:	2300      	movs	r3, #0
 8001e36:	b510      	push	{r4, lr}
 8001e38:	4604      	mov	r4, r0
 8001e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e42:	6083      	str	r3, [r0, #8]
 8001e44:	8181      	strh	r1, [r0, #12]
 8001e46:	6643      	str	r3, [r0, #100]	; 0x64
 8001e48:	81c2      	strh	r2, [r0, #14]
 8001e4a:	6183      	str	r3, [r0, #24]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	2208      	movs	r2, #8
 8001e50:	305c      	adds	r0, #92	; 0x5c
 8001e52:	f000 f90c 	bl	800206e <memset>
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <std+0x38>)
 8001e58:	6263      	str	r3, [r4, #36]	; 0x24
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <std+0x3c>)
 8001e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <std+0x40>)
 8001e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <std+0x44>)
 8001e64:	6224      	str	r4, [r4, #32]
 8001e66:	6323      	str	r3, [r4, #48]	; 0x30
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	bf00      	nop
 8001e6c:	080021c9 	.word	0x080021c9
 8001e70:	080021eb 	.word	0x080021eb
 8001e74:	08002223 	.word	0x08002223
 8001e78:	08002247 	.word	0x08002247

08001e7c <_cleanup_r>:
 8001e7c:	4901      	ldr	r1, [pc, #4]	; (8001e84 <_cleanup_r+0x8>)
 8001e7e:	f000 b8af 	b.w	8001fe0 <_fwalk_reent>
 8001e82:	bf00      	nop
 8001e84:	080023a1 	.word	0x080023a1

08001e88 <__sfmoreglue>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	2268      	movs	r2, #104	; 0x68
 8001e8c:	1e4d      	subs	r5, r1, #1
 8001e8e:	4355      	muls	r5, r2
 8001e90:	460e      	mov	r6, r1
 8001e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e96:	f000 f913 	bl	80020c0 <_malloc_r>
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	b140      	cbz	r0, 8001eb0 <__sfmoreglue+0x28>
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ea4:	300c      	adds	r0, #12
 8001ea6:	60a0      	str	r0, [r4, #8]
 8001ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001eac:	f000 f8df 	bl	800206e <memset>
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}

08001eb4 <__sfp_lock_acquire>:
 8001eb4:	4801      	ldr	r0, [pc, #4]	; (8001ebc <__sfp_lock_acquire+0x8>)
 8001eb6:	f000 b8d8 	b.w	800206a <__retarget_lock_acquire_recursive>
 8001eba:	bf00      	nop
 8001ebc:	20000149 	.word	0x20000149

08001ec0 <__sfp_lock_release>:
 8001ec0:	4801      	ldr	r0, [pc, #4]	; (8001ec8 <__sfp_lock_release+0x8>)
 8001ec2:	f000 b8d3 	b.w	800206c <__retarget_lock_release_recursive>
 8001ec6:	bf00      	nop
 8001ec8:	20000149 	.word	0x20000149

08001ecc <__sinit_lock_acquire>:
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <__sinit_lock_acquire+0x8>)
 8001ece:	f000 b8cc 	b.w	800206a <__retarget_lock_acquire_recursive>
 8001ed2:	bf00      	nop
 8001ed4:	2000014a 	.word	0x2000014a

08001ed8 <__sinit_lock_release>:
 8001ed8:	4801      	ldr	r0, [pc, #4]	; (8001ee0 <__sinit_lock_release+0x8>)
 8001eda:	f000 b8c7 	b.w	800206c <__retarget_lock_release_recursive>
 8001ede:	bf00      	nop
 8001ee0:	2000014a 	.word	0x2000014a

08001ee4 <__sinit>:
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	f7ff fff0 	bl	8001ecc <__sinit_lock_acquire>
 8001eec:	69a3      	ldr	r3, [r4, #24]
 8001eee:	b11b      	cbz	r3, 8001ef8 <__sinit+0x14>
 8001ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ef4:	f7ff bff0 	b.w	8001ed8 <__sinit_lock_release>
 8001ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001efc:	6523      	str	r3, [r4, #80]	; 0x50
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <__sinit+0x68>)
 8001f00:	4a13      	ldr	r2, [pc, #76]	; (8001f50 <__sinit+0x6c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f06:	42a3      	cmp	r3, r4
 8001f08:	bf04      	itt	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	61a3      	streq	r3, [r4, #24]
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f000 f820 	bl	8001f54 <__sfp>
 8001f14:	6060      	str	r0, [r4, #4]
 8001f16:	4620      	mov	r0, r4
 8001f18:	f000 f81c 	bl	8001f54 <__sfp>
 8001f1c:	60a0      	str	r0, [r4, #8]
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f000 f818 	bl	8001f54 <__sfp>
 8001f24:	2200      	movs	r2, #0
 8001f26:	60e0      	str	r0, [r4, #12]
 8001f28:	2104      	movs	r1, #4
 8001f2a:	6860      	ldr	r0, [r4, #4]
 8001f2c:	f7ff ff82 	bl	8001e34 <std>
 8001f30:	68a0      	ldr	r0, [r4, #8]
 8001f32:	2201      	movs	r2, #1
 8001f34:	2109      	movs	r1, #9
 8001f36:	f7ff ff7d 	bl	8001e34 <std>
 8001f3a:	68e0      	ldr	r0, [r4, #12]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	2112      	movs	r1, #18
 8001f40:	f7ff ff78 	bl	8001e34 <std>
 8001f44:	2301      	movs	r3, #1
 8001f46:	61a3      	str	r3, [r4, #24]
 8001f48:	e7d2      	b.n	8001ef0 <__sinit+0xc>
 8001f4a:	bf00      	nop
 8001f4c:	080025b4 	.word	0x080025b4
 8001f50:	08001e7d 	.word	0x08001e7d

08001f54 <__sfp>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	4607      	mov	r7, r0
 8001f58:	f7ff ffac 	bl	8001eb4 <__sfp_lock_acquire>
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <__sfp+0x84>)
 8001f5e:	681e      	ldr	r6, [r3, #0]
 8001f60:	69b3      	ldr	r3, [r6, #24]
 8001f62:	b913      	cbnz	r3, 8001f6a <__sfp+0x16>
 8001f64:	4630      	mov	r0, r6
 8001f66:	f7ff ffbd 	bl	8001ee4 <__sinit>
 8001f6a:	3648      	adds	r6, #72	; 0x48
 8001f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	d503      	bpl.n	8001f7c <__sfp+0x28>
 8001f74:	6833      	ldr	r3, [r6, #0]
 8001f76:	b30b      	cbz	r3, 8001fbc <__sfp+0x68>
 8001f78:	6836      	ldr	r6, [r6, #0]
 8001f7a:	e7f7      	b.n	8001f6c <__sfp+0x18>
 8001f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f80:	b9d5      	cbnz	r5, 8001fb8 <__sfp+0x64>
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <__sfp+0x88>)
 8001f84:	60e3      	str	r3, [r4, #12]
 8001f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8001f8c:	f000 f86c 	bl	8002068 <__retarget_lock_init_recursive>
 8001f90:	f7ff ff96 	bl	8001ec0 <__sfp_lock_release>
 8001f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f9c:	6025      	str	r5, [r4, #0]
 8001f9e:	61a5      	str	r5, [r4, #24]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fa8:	f000 f861 	bl	800206e <memset>
 8001fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb8:	3468      	adds	r4, #104	; 0x68
 8001fba:	e7d9      	b.n	8001f70 <__sfp+0x1c>
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	f7ff ff62 	bl	8001e88 <__sfmoreglue>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	6030      	str	r0, [r6, #0]
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d1d5      	bne.n	8001f78 <__sfp+0x24>
 8001fcc:	f7ff ff78 	bl	8001ec0 <__sfp_lock_release>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	e7ee      	b.n	8001fb4 <__sfp+0x60>
 8001fd6:	bf00      	nop
 8001fd8:	080025b4 	.word	0x080025b4
 8001fdc:	ffff0001 	.word	0xffff0001

08001fe0 <_fwalk_reent>:
 8001fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fe4:	4606      	mov	r6, r0
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fec:	2700      	movs	r7, #0
 8001fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8001ff6:	d505      	bpl.n	8002004 <_fwalk_reent+0x24>
 8001ff8:	6824      	ldr	r4, [r4, #0]
 8001ffa:	2c00      	cmp	r4, #0
 8001ffc:	d1f7      	bne.n	8001fee <_fwalk_reent+0xe>
 8001ffe:	4638      	mov	r0, r7
 8002000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002004:	89ab      	ldrh	r3, [r5, #12]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d907      	bls.n	800201a <_fwalk_reent+0x3a>
 800200a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800200e:	3301      	adds	r3, #1
 8002010:	d003      	beq.n	800201a <_fwalk_reent+0x3a>
 8002012:	4629      	mov	r1, r5
 8002014:	4630      	mov	r0, r6
 8002016:	47c0      	blx	r8
 8002018:	4307      	orrs	r7, r0
 800201a:	3568      	adds	r5, #104	; 0x68
 800201c:	e7e9      	b.n	8001ff2 <_fwalk_reent+0x12>
	...

08002020 <__libc_init_array>:
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	4d0d      	ldr	r5, [pc, #52]	; (8002058 <__libc_init_array+0x38>)
 8002024:	4c0d      	ldr	r4, [pc, #52]	; (800205c <__libc_init_array+0x3c>)
 8002026:	1b64      	subs	r4, r4, r5
 8002028:	10a4      	asrs	r4, r4, #2
 800202a:	2600      	movs	r6, #0
 800202c:	42a6      	cmp	r6, r4
 800202e:	d109      	bne.n	8002044 <__libc_init_array+0x24>
 8002030:	4d0b      	ldr	r5, [pc, #44]	; (8002060 <__libc_init_array+0x40>)
 8002032:	4c0c      	ldr	r4, [pc, #48]	; (8002064 <__libc_init_array+0x44>)
 8002034:	f000 fa6c 	bl	8002510 <_init>
 8002038:	1b64      	subs	r4, r4, r5
 800203a:	10a4      	asrs	r4, r4, #2
 800203c:	2600      	movs	r6, #0
 800203e:	42a6      	cmp	r6, r4
 8002040:	d105      	bne.n	800204e <__libc_init_array+0x2e>
 8002042:	bd70      	pop	{r4, r5, r6, pc}
 8002044:	f855 3b04 	ldr.w	r3, [r5], #4
 8002048:	4798      	blx	r3
 800204a:	3601      	adds	r6, #1
 800204c:	e7ee      	b.n	800202c <__libc_init_array+0xc>
 800204e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002052:	4798      	blx	r3
 8002054:	3601      	adds	r6, #1
 8002056:	e7f2      	b.n	800203e <__libc_init_array+0x1e>
 8002058:	080025c0 	.word	0x080025c0
 800205c:	080025c0 	.word	0x080025c0
 8002060:	080025c0 	.word	0x080025c0
 8002064:	080025c4 	.word	0x080025c4

08002068 <__retarget_lock_init_recursive>:
 8002068:	4770      	bx	lr

0800206a <__retarget_lock_acquire_recursive>:
 800206a:	4770      	bx	lr

0800206c <__retarget_lock_release_recursive>:
 800206c:	4770      	bx	lr

0800206e <memset>:
 800206e:	4402      	add	r2, r0
 8002070:	4603      	mov	r3, r0
 8002072:	4293      	cmp	r3, r2
 8002074:	d100      	bne.n	8002078 <memset+0xa>
 8002076:	4770      	bx	lr
 8002078:	f803 1b01 	strb.w	r1, [r3], #1
 800207c:	e7f9      	b.n	8002072 <memset+0x4>
	...

08002080 <sbrk_aligned>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	4e0e      	ldr	r6, [pc, #56]	; (80020bc <sbrk_aligned+0x3c>)
 8002084:	460c      	mov	r4, r1
 8002086:	6831      	ldr	r1, [r6, #0]
 8002088:	4605      	mov	r5, r0
 800208a:	b911      	cbnz	r1, 8002092 <sbrk_aligned+0x12>
 800208c:	f000 f88c 	bl	80021a8 <_sbrk_r>
 8002090:	6030      	str	r0, [r6, #0]
 8002092:	4621      	mov	r1, r4
 8002094:	4628      	mov	r0, r5
 8002096:	f000 f887 	bl	80021a8 <_sbrk_r>
 800209a:	1c43      	adds	r3, r0, #1
 800209c:	d00a      	beq.n	80020b4 <sbrk_aligned+0x34>
 800209e:	1cc4      	adds	r4, r0, #3
 80020a0:	f024 0403 	bic.w	r4, r4, #3
 80020a4:	42a0      	cmp	r0, r4
 80020a6:	d007      	beq.n	80020b8 <sbrk_aligned+0x38>
 80020a8:	1a21      	subs	r1, r4, r0
 80020aa:	4628      	mov	r0, r5
 80020ac:	f000 f87c 	bl	80021a8 <_sbrk_r>
 80020b0:	3001      	adds	r0, #1
 80020b2:	d101      	bne.n	80020b8 <sbrk_aligned+0x38>
 80020b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020b8:	4620      	mov	r0, r4
 80020ba:	bd70      	pop	{r4, r5, r6, pc}
 80020bc:	20000150 	.word	0x20000150

080020c0 <_malloc_r>:
 80020c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c4:	1ccd      	adds	r5, r1, #3
 80020c6:	f025 0503 	bic.w	r5, r5, #3
 80020ca:	3508      	adds	r5, #8
 80020cc:	2d0c      	cmp	r5, #12
 80020ce:	bf38      	it	cc
 80020d0:	250c      	movcc	r5, #12
 80020d2:	2d00      	cmp	r5, #0
 80020d4:	4607      	mov	r7, r0
 80020d6:	db01      	blt.n	80020dc <_malloc_r+0x1c>
 80020d8:	42a9      	cmp	r1, r5
 80020da:	d905      	bls.n	80020e8 <_malloc_r+0x28>
 80020dc:	230c      	movs	r3, #12
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	2600      	movs	r6, #0
 80020e2:	4630      	mov	r0, r6
 80020e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020e8:	4e2e      	ldr	r6, [pc, #184]	; (80021a4 <_malloc_r+0xe4>)
 80020ea:	f000 f9a7 	bl	800243c <__malloc_lock>
 80020ee:	6833      	ldr	r3, [r6, #0]
 80020f0:	461c      	mov	r4, r3
 80020f2:	bb34      	cbnz	r4, 8002142 <_malloc_r+0x82>
 80020f4:	4629      	mov	r1, r5
 80020f6:	4638      	mov	r0, r7
 80020f8:	f7ff ffc2 	bl	8002080 <sbrk_aligned>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	4604      	mov	r4, r0
 8002100:	d14d      	bne.n	800219e <_malloc_r+0xde>
 8002102:	6834      	ldr	r4, [r6, #0]
 8002104:	4626      	mov	r6, r4
 8002106:	2e00      	cmp	r6, #0
 8002108:	d140      	bne.n	800218c <_malloc_r+0xcc>
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	4631      	mov	r1, r6
 800210e:	4638      	mov	r0, r7
 8002110:	eb04 0803 	add.w	r8, r4, r3
 8002114:	f000 f848 	bl	80021a8 <_sbrk_r>
 8002118:	4580      	cmp	r8, r0
 800211a:	d13a      	bne.n	8002192 <_malloc_r+0xd2>
 800211c:	6821      	ldr	r1, [r4, #0]
 800211e:	3503      	adds	r5, #3
 8002120:	1a6d      	subs	r5, r5, r1
 8002122:	f025 0503 	bic.w	r5, r5, #3
 8002126:	3508      	adds	r5, #8
 8002128:	2d0c      	cmp	r5, #12
 800212a:	bf38      	it	cc
 800212c:	250c      	movcc	r5, #12
 800212e:	4629      	mov	r1, r5
 8002130:	4638      	mov	r0, r7
 8002132:	f7ff ffa5 	bl	8002080 <sbrk_aligned>
 8002136:	3001      	adds	r0, #1
 8002138:	d02b      	beq.n	8002192 <_malloc_r+0xd2>
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	442b      	add	r3, r5
 800213e:	6023      	str	r3, [r4, #0]
 8002140:	e00e      	b.n	8002160 <_malloc_r+0xa0>
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	1b52      	subs	r2, r2, r5
 8002146:	d41e      	bmi.n	8002186 <_malloc_r+0xc6>
 8002148:	2a0b      	cmp	r2, #11
 800214a:	d916      	bls.n	800217a <_malloc_r+0xba>
 800214c:	1961      	adds	r1, r4, r5
 800214e:	42a3      	cmp	r3, r4
 8002150:	6025      	str	r5, [r4, #0]
 8002152:	bf18      	it	ne
 8002154:	6059      	strne	r1, [r3, #4]
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	bf08      	it	eq
 800215a:	6031      	streq	r1, [r6, #0]
 800215c:	5162      	str	r2, [r4, r5]
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	4638      	mov	r0, r7
 8002162:	f104 060b 	add.w	r6, r4, #11
 8002166:	f000 f96f 	bl	8002448 <__malloc_unlock>
 800216a:	f026 0607 	bic.w	r6, r6, #7
 800216e:	1d23      	adds	r3, r4, #4
 8002170:	1af2      	subs	r2, r6, r3
 8002172:	d0b6      	beq.n	80020e2 <_malloc_r+0x22>
 8002174:	1b9b      	subs	r3, r3, r6
 8002176:	50a3      	str	r3, [r4, r2]
 8002178:	e7b3      	b.n	80020e2 <_malloc_r+0x22>
 800217a:	6862      	ldr	r2, [r4, #4]
 800217c:	42a3      	cmp	r3, r4
 800217e:	bf0c      	ite	eq
 8002180:	6032      	streq	r2, [r6, #0]
 8002182:	605a      	strne	r2, [r3, #4]
 8002184:	e7ec      	b.n	8002160 <_malloc_r+0xa0>
 8002186:	4623      	mov	r3, r4
 8002188:	6864      	ldr	r4, [r4, #4]
 800218a:	e7b2      	b.n	80020f2 <_malloc_r+0x32>
 800218c:	4634      	mov	r4, r6
 800218e:	6876      	ldr	r6, [r6, #4]
 8002190:	e7b9      	b.n	8002106 <_malloc_r+0x46>
 8002192:	230c      	movs	r3, #12
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4638      	mov	r0, r7
 8002198:	f000 f956 	bl	8002448 <__malloc_unlock>
 800219c:	e7a1      	b.n	80020e2 <_malloc_r+0x22>
 800219e:	6025      	str	r5, [r4, #0]
 80021a0:	e7de      	b.n	8002160 <_malloc_r+0xa0>
 80021a2:	bf00      	nop
 80021a4:	2000014c 	.word	0x2000014c

080021a8 <_sbrk_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4d06      	ldr	r5, [pc, #24]	; (80021c4 <_sbrk_r+0x1c>)
 80021ac:	2300      	movs	r3, #0
 80021ae:	4604      	mov	r4, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	602b      	str	r3, [r5, #0]
 80021b4:	f7fe fbf4 	bl	80009a0 <_sbrk>
 80021b8:	1c43      	adds	r3, r0, #1
 80021ba:	d102      	bne.n	80021c2 <_sbrk_r+0x1a>
 80021bc:	682b      	ldr	r3, [r5, #0]
 80021be:	b103      	cbz	r3, 80021c2 <_sbrk_r+0x1a>
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	20000154 	.word	0x20000154

080021c8 <__sread>:
 80021c8:	b510      	push	{r4, lr}
 80021ca:	460c      	mov	r4, r1
 80021cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d0:	f000 f98c 	bl	80024ec <_read_r>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	bfab      	itete	ge
 80021d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021da:	89a3      	ldrhlt	r3, [r4, #12]
 80021dc:	181b      	addge	r3, r3, r0
 80021de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021e2:	bfac      	ite	ge
 80021e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80021e6:	81a3      	strhlt	r3, [r4, #12]
 80021e8:	bd10      	pop	{r4, pc}

080021ea <__swrite>:
 80021ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ee:	461f      	mov	r7, r3
 80021f0:	898b      	ldrh	r3, [r1, #12]
 80021f2:	05db      	lsls	r3, r3, #23
 80021f4:	4605      	mov	r5, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	4616      	mov	r6, r2
 80021fa:	d505      	bpl.n	8002208 <__swrite+0x1e>
 80021fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002200:	2302      	movs	r3, #2
 8002202:	2200      	movs	r2, #0
 8002204:	f000 f908 	bl	8002418 <_lseek_r>
 8002208:	89a3      	ldrh	r3, [r4, #12]
 800220a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800220e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002212:	81a3      	strh	r3, [r4, #12]
 8002214:	4632      	mov	r2, r6
 8002216:	463b      	mov	r3, r7
 8002218:	4628      	mov	r0, r5
 800221a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800221e:	f000 b817 	b.w	8002250 <_write_r>

08002222 <__sseek>:
 8002222:	b510      	push	{r4, lr}
 8002224:	460c      	mov	r4, r1
 8002226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800222a:	f000 f8f5 	bl	8002418 <_lseek_r>
 800222e:	1c43      	adds	r3, r0, #1
 8002230:	89a3      	ldrh	r3, [r4, #12]
 8002232:	bf15      	itete	ne
 8002234:	6560      	strne	r0, [r4, #84]	; 0x54
 8002236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800223a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800223e:	81a3      	strheq	r3, [r4, #12]
 8002240:	bf18      	it	ne
 8002242:	81a3      	strhne	r3, [r4, #12]
 8002244:	bd10      	pop	{r4, pc}

08002246 <__sclose>:
 8002246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800224a:	f000 b813 	b.w	8002274 <_close_r>
	...

08002250 <_write_r>:
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4d07      	ldr	r5, [pc, #28]	; (8002270 <_write_r+0x20>)
 8002254:	4604      	mov	r4, r0
 8002256:	4608      	mov	r0, r1
 8002258:	4611      	mov	r1, r2
 800225a:	2200      	movs	r2, #0
 800225c:	602a      	str	r2, [r5, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	f7ff fc11 	bl	8001a86 <_write>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	d102      	bne.n	800226e <_write_r+0x1e>
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	b103      	cbz	r3, 800226e <_write_r+0x1e>
 800226c:	6023      	str	r3, [r4, #0]
 800226e:	bd38      	pop	{r3, r4, r5, pc}
 8002270:	20000154 	.word	0x20000154

08002274 <_close_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4d06      	ldr	r5, [pc, #24]	; (8002290 <_close_r+0x1c>)
 8002278:	2300      	movs	r3, #0
 800227a:	4604      	mov	r4, r0
 800227c:	4608      	mov	r0, r1
 800227e:	602b      	str	r3, [r5, #0]
 8002280:	f7ff fc32 	bl	8001ae8 <_close>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d102      	bne.n	800228e <_close_r+0x1a>
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	b103      	cbz	r3, 800228e <_close_r+0x1a>
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	20000154 	.word	0x20000154

08002294 <__sflush_r>:
 8002294:	898a      	ldrh	r2, [r1, #12]
 8002296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800229a:	4605      	mov	r5, r0
 800229c:	0710      	lsls	r0, r2, #28
 800229e:	460c      	mov	r4, r1
 80022a0:	d458      	bmi.n	8002354 <__sflush_r+0xc0>
 80022a2:	684b      	ldr	r3, [r1, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	dc05      	bgt.n	80022b4 <__sflush_r+0x20>
 80022a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	dc02      	bgt.n	80022b4 <__sflush_r+0x20>
 80022ae:	2000      	movs	r0, #0
 80022b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022b6:	2e00      	cmp	r6, #0
 80022b8:	d0f9      	beq.n	80022ae <__sflush_r+0x1a>
 80022ba:	2300      	movs	r3, #0
 80022bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022c0:	682f      	ldr	r7, [r5, #0]
 80022c2:	602b      	str	r3, [r5, #0]
 80022c4:	d032      	beq.n	800232c <__sflush_r+0x98>
 80022c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	075a      	lsls	r2, r3, #29
 80022cc:	d505      	bpl.n	80022da <__sflush_r+0x46>
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	1ac0      	subs	r0, r0, r3
 80022d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022d4:	b10b      	cbz	r3, 80022da <__sflush_r+0x46>
 80022d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022d8:	1ac0      	subs	r0, r0, r3
 80022da:	2300      	movs	r3, #0
 80022dc:	4602      	mov	r2, r0
 80022de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022e0:	6a21      	ldr	r1, [r4, #32]
 80022e2:	4628      	mov	r0, r5
 80022e4:	47b0      	blx	r6
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	d106      	bne.n	80022fa <__sflush_r+0x66>
 80022ec:	6829      	ldr	r1, [r5, #0]
 80022ee:	291d      	cmp	r1, #29
 80022f0:	d82c      	bhi.n	800234c <__sflush_r+0xb8>
 80022f2:	4a2a      	ldr	r2, [pc, #168]	; (800239c <__sflush_r+0x108>)
 80022f4:	40ca      	lsrs	r2, r1
 80022f6:	07d6      	lsls	r6, r2, #31
 80022f8:	d528      	bpl.n	800234c <__sflush_r+0xb8>
 80022fa:	2200      	movs	r2, #0
 80022fc:	6062      	str	r2, [r4, #4]
 80022fe:	04d9      	lsls	r1, r3, #19
 8002300:	6922      	ldr	r2, [r4, #16]
 8002302:	6022      	str	r2, [r4, #0]
 8002304:	d504      	bpl.n	8002310 <__sflush_r+0x7c>
 8002306:	1c42      	adds	r2, r0, #1
 8002308:	d101      	bne.n	800230e <__sflush_r+0x7a>
 800230a:	682b      	ldr	r3, [r5, #0]
 800230c:	b903      	cbnz	r3, 8002310 <__sflush_r+0x7c>
 800230e:	6560      	str	r0, [r4, #84]	; 0x54
 8002310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002312:	602f      	str	r7, [r5, #0]
 8002314:	2900      	cmp	r1, #0
 8002316:	d0ca      	beq.n	80022ae <__sflush_r+0x1a>
 8002318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800231c:	4299      	cmp	r1, r3
 800231e:	d002      	beq.n	8002326 <__sflush_r+0x92>
 8002320:	4628      	mov	r0, r5
 8002322:	f000 f897 	bl	8002454 <_free_r>
 8002326:	2000      	movs	r0, #0
 8002328:	6360      	str	r0, [r4, #52]	; 0x34
 800232a:	e7c1      	b.n	80022b0 <__sflush_r+0x1c>
 800232c:	6a21      	ldr	r1, [r4, #32]
 800232e:	2301      	movs	r3, #1
 8002330:	4628      	mov	r0, r5
 8002332:	47b0      	blx	r6
 8002334:	1c41      	adds	r1, r0, #1
 8002336:	d1c7      	bne.n	80022c8 <__sflush_r+0x34>
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0c4      	beq.n	80022c8 <__sflush_r+0x34>
 800233e:	2b1d      	cmp	r3, #29
 8002340:	d001      	beq.n	8002346 <__sflush_r+0xb2>
 8002342:	2b16      	cmp	r3, #22
 8002344:	d101      	bne.n	800234a <__sflush_r+0xb6>
 8002346:	602f      	str	r7, [r5, #0]
 8002348:	e7b1      	b.n	80022ae <__sflush_r+0x1a>
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002350:	81a3      	strh	r3, [r4, #12]
 8002352:	e7ad      	b.n	80022b0 <__sflush_r+0x1c>
 8002354:	690f      	ldr	r7, [r1, #16]
 8002356:	2f00      	cmp	r7, #0
 8002358:	d0a9      	beq.n	80022ae <__sflush_r+0x1a>
 800235a:	0793      	lsls	r3, r2, #30
 800235c:	680e      	ldr	r6, [r1, #0]
 800235e:	bf08      	it	eq
 8002360:	694b      	ldreq	r3, [r1, #20]
 8002362:	600f      	str	r7, [r1, #0]
 8002364:	bf18      	it	ne
 8002366:	2300      	movne	r3, #0
 8002368:	eba6 0807 	sub.w	r8, r6, r7
 800236c:	608b      	str	r3, [r1, #8]
 800236e:	f1b8 0f00 	cmp.w	r8, #0
 8002372:	dd9c      	ble.n	80022ae <__sflush_r+0x1a>
 8002374:	6a21      	ldr	r1, [r4, #32]
 8002376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002378:	4643      	mov	r3, r8
 800237a:	463a      	mov	r2, r7
 800237c:	4628      	mov	r0, r5
 800237e:	47b0      	blx	r6
 8002380:	2800      	cmp	r0, #0
 8002382:	dc06      	bgt.n	8002392 <__sflush_r+0xfe>
 8002384:	89a3      	ldrh	r3, [r4, #12]
 8002386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238a:	81a3      	strh	r3, [r4, #12]
 800238c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002390:	e78e      	b.n	80022b0 <__sflush_r+0x1c>
 8002392:	4407      	add	r7, r0
 8002394:	eba8 0800 	sub.w	r8, r8, r0
 8002398:	e7e9      	b.n	800236e <__sflush_r+0xda>
 800239a:	bf00      	nop
 800239c:	20400001 	.word	0x20400001

080023a0 <_fflush_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	690b      	ldr	r3, [r1, #16]
 80023a4:	4605      	mov	r5, r0
 80023a6:	460c      	mov	r4, r1
 80023a8:	b913      	cbnz	r3, 80023b0 <_fflush_r+0x10>
 80023aa:	2500      	movs	r5, #0
 80023ac:	4628      	mov	r0, r5
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	b118      	cbz	r0, 80023ba <_fflush_r+0x1a>
 80023b2:	6983      	ldr	r3, [r0, #24]
 80023b4:	b90b      	cbnz	r3, 80023ba <_fflush_r+0x1a>
 80023b6:	f7ff fd95 	bl	8001ee4 <__sinit>
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <_fflush_r+0x6c>)
 80023bc:	429c      	cmp	r4, r3
 80023be:	d11b      	bne.n	80023f8 <_fflush_r+0x58>
 80023c0:	686c      	ldr	r4, [r5, #4]
 80023c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0ef      	beq.n	80023aa <_fflush_r+0xa>
 80023ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80023cc:	07d0      	lsls	r0, r2, #31
 80023ce:	d404      	bmi.n	80023da <_fflush_r+0x3a>
 80023d0:	0599      	lsls	r1, r3, #22
 80023d2:	d402      	bmi.n	80023da <_fflush_r+0x3a>
 80023d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023d6:	f7ff fe48 	bl	800206a <__retarget_lock_acquire_recursive>
 80023da:	4628      	mov	r0, r5
 80023dc:	4621      	mov	r1, r4
 80023de:	f7ff ff59 	bl	8002294 <__sflush_r>
 80023e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023e4:	07da      	lsls	r2, r3, #31
 80023e6:	4605      	mov	r5, r0
 80023e8:	d4e0      	bmi.n	80023ac <_fflush_r+0xc>
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	059b      	lsls	r3, r3, #22
 80023ee:	d4dd      	bmi.n	80023ac <_fflush_r+0xc>
 80023f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023f2:	f7ff fe3b 	bl	800206c <__retarget_lock_release_recursive>
 80023f6:	e7d9      	b.n	80023ac <_fflush_r+0xc>
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <_fflush_r+0x70>)
 80023fa:	429c      	cmp	r4, r3
 80023fc:	d101      	bne.n	8002402 <_fflush_r+0x62>
 80023fe:	68ac      	ldr	r4, [r5, #8]
 8002400:	e7df      	b.n	80023c2 <_fflush_r+0x22>
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <_fflush_r+0x74>)
 8002404:	429c      	cmp	r4, r3
 8002406:	bf08      	it	eq
 8002408:	68ec      	ldreq	r4, [r5, #12]
 800240a:	e7da      	b.n	80023c2 <_fflush_r+0x22>
 800240c:	08002574 	.word	0x08002574
 8002410:	08002594 	.word	0x08002594
 8002414:	08002554 	.word	0x08002554

08002418 <_lseek_r>:
 8002418:	b538      	push	{r3, r4, r5, lr}
 800241a:	4d07      	ldr	r5, [pc, #28]	; (8002438 <_lseek_r+0x20>)
 800241c:	4604      	mov	r4, r0
 800241e:	4608      	mov	r0, r1
 8002420:	4611      	mov	r1, r2
 8002422:	2200      	movs	r2, #0
 8002424:	602a      	str	r2, [r5, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	f7ff fb1b 	bl	8001a62 <_lseek>
 800242c:	1c43      	adds	r3, r0, #1
 800242e:	d102      	bne.n	8002436 <_lseek_r+0x1e>
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	b103      	cbz	r3, 8002436 <_lseek_r+0x1e>
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	bd38      	pop	{r3, r4, r5, pc}
 8002438:	20000154 	.word	0x20000154

0800243c <__malloc_lock>:
 800243c:	4801      	ldr	r0, [pc, #4]	; (8002444 <__malloc_lock+0x8>)
 800243e:	f7ff be14 	b.w	800206a <__retarget_lock_acquire_recursive>
 8002442:	bf00      	nop
 8002444:	20000148 	.word	0x20000148

08002448 <__malloc_unlock>:
 8002448:	4801      	ldr	r0, [pc, #4]	; (8002450 <__malloc_unlock+0x8>)
 800244a:	f7ff be0f 	b.w	800206c <__retarget_lock_release_recursive>
 800244e:	bf00      	nop
 8002450:	20000148 	.word	0x20000148

08002454 <_free_r>:
 8002454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002456:	2900      	cmp	r1, #0
 8002458:	d044      	beq.n	80024e4 <_free_r+0x90>
 800245a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800245e:	9001      	str	r0, [sp, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f1a1 0404 	sub.w	r4, r1, #4
 8002466:	bfb8      	it	lt
 8002468:	18e4      	addlt	r4, r4, r3
 800246a:	f7ff ffe7 	bl	800243c <__malloc_lock>
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <_free_r+0x94>)
 8002470:	9801      	ldr	r0, [sp, #4]
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	b933      	cbnz	r3, 8002484 <_free_r+0x30>
 8002476:	6063      	str	r3, [r4, #4]
 8002478:	6014      	str	r4, [r2, #0]
 800247a:	b003      	add	sp, #12
 800247c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002480:	f7ff bfe2 	b.w	8002448 <__malloc_unlock>
 8002484:	42a3      	cmp	r3, r4
 8002486:	d908      	bls.n	800249a <_free_r+0x46>
 8002488:	6825      	ldr	r5, [r4, #0]
 800248a:	1961      	adds	r1, r4, r5
 800248c:	428b      	cmp	r3, r1
 800248e:	bf01      	itttt	eq
 8002490:	6819      	ldreq	r1, [r3, #0]
 8002492:	685b      	ldreq	r3, [r3, #4]
 8002494:	1949      	addeq	r1, r1, r5
 8002496:	6021      	streq	r1, [r4, #0]
 8002498:	e7ed      	b.n	8002476 <_free_r+0x22>
 800249a:	461a      	mov	r2, r3
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	b10b      	cbz	r3, 80024a4 <_free_r+0x50>
 80024a0:	42a3      	cmp	r3, r4
 80024a2:	d9fa      	bls.n	800249a <_free_r+0x46>
 80024a4:	6811      	ldr	r1, [r2, #0]
 80024a6:	1855      	adds	r5, r2, r1
 80024a8:	42a5      	cmp	r5, r4
 80024aa:	d10b      	bne.n	80024c4 <_free_r+0x70>
 80024ac:	6824      	ldr	r4, [r4, #0]
 80024ae:	4421      	add	r1, r4
 80024b0:	1854      	adds	r4, r2, r1
 80024b2:	42a3      	cmp	r3, r4
 80024b4:	6011      	str	r1, [r2, #0]
 80024b6:	d1e0      	bne.n	800247a <_free_r+0x26>
 80024b8:	681c      	ldr	r4, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	6053      	str	r3, [r2, #4]
 80024be:	4421      	add	r1, r4
 80024c0:	6011      	str	r1, [r2, #0]
 80024c2:	e7da      	b.n	800247a <_free_r+0x26>
 80024c4:	d902      	bls.n	80024cc <_free_r+0x78>
 80024c6:	230c      	movs	r3, #12
 80024c8:	6003      	str	r3, [r0, #0]
 80024ca:	e7d6      	b.n	800247a <_free_r+0x26>
 80024cc:	6825      	ldr	r5, [r4, #0]
 80024ce:	1961      	adds	r1, r4, r5
 80024d0:	428b      	cmp	r3, r1
 80024d2:	bf04      	itt	eq
 80024d4:	6819      	ldreq	r1, [r3, #0]
 80024d6:	685b      	ldreq	r3, [r3, #4]
 80024d8:	6063      	str	r3, [r4, #4]
 80024da:	bf04      	itt	eq
 80024dc:	1949      	addeq	r1, r1, r5
 80024de:	6021      	streq	r1, [r4, #0]
 80024e0:	6054      	str	r4, [r2, #4]
 80024e2:	e7ca      	b.n	800247a <_free_r+0x26>
 80024e4:	b003      	add	sp, #12
 80024e6:	bd30      	pop	{r4, r5, pc}
 80024e8:	2000014c 	.word	0x2000014c

080024ec <_read_r>:
 80024ec:	b538      	push	{r3, r4, r5, lr}
 80024ee:	4d07      	ldr	r5, [pc, #28]	; (800250c <_read_r+0x20>)
 80024f0:	4604      	mov	r4, r0
 80024f2:	4608      	mov	r0, r1
 80024f4:	4611      	mov	r1, r2
 80024f6:	2200      	movs	r2, #0
 80024f8:	602a      	str	r2, [r5, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f7ff fa59 	bl	80019b2 <_read>
 8002500:	1c43      	adds	r3, r0, #1
 8002502:	d102      	bne.n	800250a <_read_r+0x1e>
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	b103      	cbz	r3, 800250a <_read_r+0x1e>
 8002508:	6023      	str	r3, [r4, #0]
 800250a:	bd38      	pop	{r3, r4, r5, pc}
 800250c:	20000154 	.word	0x20000154

08002510 <_init>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr

0800251c <_fini>:
 800251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251e:	bf00      	nop
 8002520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002522:	bc08      	pop	{r3}
 8002524:	469e      	mov	lr, r3
 8002526:	4770      	bx	lr
